let $PATH=$PATH . ':' . $HOME . '/.local/bin'
let $PATH=$PATH . ':' . $HOME . '/bin'
let $TERM='terminator'

call plug#begin('~/.vim/plugged')

"Syntax
Plug 'Handlebars'
Plug 'Puppet-Syntax-Highlighting'
Plug 'https://github.com/Glench/Vim-Jinja2-Syntax.git'
Plug 'https://github.com/ivoputzer/vim-colors-flatland.git'
Plug 'https://github.com/mattn/emmet-vim.git'
Plug 'https://github.com/mitsuhiko/vim-rst.git'
Plug 'https://github.com/pfdevilliers/Pretty-Vim-Python.git'
Plug 'https://github.com/saltstack/salt-vim.git'
Plug 'less-syntax'
Plug 'mako.vim'

"Colorschemes
Plug 'badwolf'
Plug 'https://github.com/chriskempson/vim-tomorrow-theme'
Plug 'https://github.com/flazz/vim-colorschemes.git'
Plug 'https://github.com/jordwalke/flatlandia.git'
Plug 'https://github.com/mbriggs/vim-themes.git'

"Autocompletion
Plug 'Shougo/neocomplete'
Plug 'Shougo/neosnippet'
Plug 'Shougo/neosnippet-snippets'
Plug 'https://github.com/davidhalter/jedi-vim.git'

"Tools
Plug 'Syntastic'
Plug 'Tagbar'
Plug 'The-NERD-Commenter'
Plug 'The-NERD-tree'
Plug 'fugitive.vim'
Plug 'https://github.com/JessicaKMcIntosh/Vim.git'
Plug 'https://github.com/bling/vim-airline.git'
Plug 'https://github.com/ervandew/supertab.git'
Plug 'https://github.com/mhinz/vim-startify.git'
Plug 'matchit.zip'
Plug 'mileszs/ack.vim'
Plug 'minibufexplorerpp'
Plug 'simple-pairs'
Plug 'sudo.vim'
Plug 'surround.vim'
Plug 'vim-flake8'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

call plug#end()


" Set up vim-project
"set rtp+=~/.vim/bundle/vim-project/
" custom starting path
"call project#rc("~/Projects")

let g:project_use_nerdtree = 1

filetype on                   " required!
set laststatus=2
set hidden
set antialias
set nocompatible
set nu
set ai
set si
syntax on
set cursorline
"filetype on
filetype indent on
filetype plugin on
set tabstop=4
set shiftwidth=4
set expandtab
set smarttab
set shiftround
let mapleader=","
colorscheme flatlandia
set ic  "Insensitive case
set colorcolumn=+1
set colorcolumn=120

" -- normal mode mapping
nmap <A-h> :bp!<CR>
nmap <A-l> :bn!<CR>
map E :NERDTreeToggle<CR>
map <C-k><C-b> :NERDTreeToggle<CR>
map <C-F12> :TagbarToggle<CR>
map <C-n> :TagbarToggle<CR>
map <F6> :SyntasticCheck<CR>
map <C-A-p> :Welcome<CR>
noremap <C-h> :set hlsearch! hlsearch?<CR>
map <c-d> :bd!<CR>
map <C-f> :Ack<space>
nmap mm '
vmap <F9> :'<,'>sort<CR>
nmap <C-o> :NERDTree<CR>
nmap <C-A-p> :OpenSession<space>
nmap <C-S> :w<CR>
nmap <leader>p "+gP
vmap <leader>y "+y
map <C-p> :FZF<CR>


" -- Insert mode mapping
imap ;; <Esc>

" -- Search
set incsearch
set hlsearch
set smartcase

" -- Beep
set novisualbell
set noerrorbells

"Supprime le maximum de chose dans l'interface
set guioptions=Ace
let NERDTreeIgnore = ['\.pyc$']

"Linter configuration
let g:syntastic_debug = 0
let g:syntastic_python_checkers = ['flake8']
let g:syntastic_python_flake8_args= '--max-line-length=119'
let g:flake8_max_line_length=119


"Neocomplete
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'



"Jedi
autocmd FileType python setlocal omnifunc=jedi#completions
let g:jedi#completions_enabled = 1
let g:jedi#auto_vim_configuration = 0
let g:jedi#smart_auto_mappings = 0

"Git
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>gc :Gcommit<CR>
nnoremap <Leader>gbl :Gblame<CR>
nnoremap <Leader>gbr :Gbrowse<CR>
nnoremap <Leader>gdiff :Gdiff<CR>


"Emmet
let g:user_emmet_mode='a'
let g:user_emmet_leader_key = '<leader>'
"let g:user_emmet_expandabbr_key = '<leader>e'


" Syntaxes
autocmd BufNewFile,BufRead *.pp   set syntax=puppet
au BufNewFile,BufRead *.sls set filetype=sls

" vim-session
let g:session_autoload='no'
let g:session_autosave='yes'

" NeoComplete
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)


" SuperTab like snippets behavior.
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif
