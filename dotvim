set nocompatible               " be iMproved
filetype on                   " required!

let $PATH=$PATH . ':' . $HOME . '/.local/bin'
let $PATH=$PATH . ':' . $HOME . '/bin'

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()


Bundle 'CSApprox'
Bundle 'Handlebars'
Bundle 'Syntastic'
Bundle 'Tagbar'
Bundle 'The-NERD-Commenter'
Bundle 'The-NERD-tree'
"Bundle 'SirVer/ultisnips'
Bundle 'ctrlp.vim'
Bundle 'fugitive.vim'
Bundle 'https://github.com/Glench/Vim-Jinja2-Syntax.git'
Bundle 'https://github.com/chriskempson/vim-tomorrow-theme'
Bundle 'https://github.com/mattn/emmet-vim.git'
Bundle 'https://github.com/uguu-org/vim-matrix-screensaver.git'
Bundle 'less-syntax'
Bundle 'mako.vim'
Bundle 'matchit.zip'
Bundle 'mileszs/ack.vim'
Bundle 'minibufexplorerpp'
Bundle 'sudo.vim'
Bundle 'surround.vim'
Bundle 'vim-flake8'
Bundle 'https://github.com/mbriggs/vim-themes.git'
Bundle 'simple-pairs'
Bundle 'https://github.com/saltstack/salt-vim.git'
Bundle 'https://github.com/JessicaKMcIntosh/Vim.git'
"Bundle 'wombat256.vim'
"Bundle 'https://github.com/csexton/trailertrash.vim.git'
"Bundle 'Solarized'
Bundle 'LustyExplorer'
"Bundle 'https://github.com/morhetz/gruvbox.git'
Bundle 'https://github.com/zeis/vim-kolor.git'
Bundle 'badwolf'
"Bundle 'https://github.com/amiorin/vim-project.git'
Bundle 'https://github.com/mitsuhiko/vim-rst.git'
"Bundle 'https://github.com/flazz/vim-colorschemes.git'
"Bundle 'https://github.com/notpratheek/Pychimp-vim.git'
"Bundle 'https://github.com/pfdevilliers/Pretty-Vim-Python.git'
Bundle 'Puppet-Syntax-Highlighting'
Bundle 'https://github.com/mhinz/vim-startify.git'
""Bundle 'https://github.com/xolox/vim-misc.git'
""Bundle 'https://github.com/xolox/vim-session.git'
Bundle 'https://github.com/tomasr/molokai.git'
"Bundle 'https://github.com/ervandew/supertab.git'
""Bundle 'https://github.com/jonathanfilip/vim-lucius.git'
"Bundle 'honza/vim-snippets'
"Plugin 'MarcWeber/vim-addon-mw-utils'
"Plugin 'tomtom/tlib_vim'
"Plugin 'garbas/vim-snipmate'
"Plugin 'https://github.com/Shougo/neocomplete.vim.git'
Plugin 'https://github.com/davidhalter/jedi-vim.git'

"Optional:
"Plugin 'honza/vim-snippets'
"Bundle 'Lokaltog/powerline'
"Bundle 'https://github.com/Lokaltog/vim-powerline.git'
Plugin 'https://github.com/bling/vim-airline.git'
Plugin 'Shougo/neocomplete'

Plugin 'Shougo/neosnippet'
Plugin 'Shougo/neosnippet-snippets'




" Set up vim-project
"set rtp+=~/.vim/bundle/vim-project/
" custom starting path
"call project#rc("~/Projects")

"let g:project_use_nerdtree = 1

set laststatus=2
set hidden
set antialias
"set paste
set t_Co=256
set nocompatible
set nu
set ai
set si
syntax on
set cursorline
"filetype on
filetype indent on
filetype plugin on
set tabstop=4
set shiftwidth=4
set expandtab
set smarttab
set shiftround
let mapleader=","
"set guifont=Source\ Code\ Pro\ 10
set guifont=Inconsolata-g\ 11
"set guifont=Monaco\ for\ Powerline\ 10
"colorscheme Tomorrow-Night
"colorscheme molokai
colorscheme badwolf
set ic  "Insensitive case
set colorcolumn=+1
set colorcolumn=120
"set background=dark

" -- normal mode mapping
"nmap <Tab> :bp!<C>
nmap <A-h> :bp!<CR>
"map <BS> :bn!<CR>
nmap <A-l> :bn!<CR>
map E :NERDTreeToggle<CR>
map <C-b> :NERDTreeToggle<CR>
map <C-F12> :TagbarToggle<CR>
"map T :TagbarToggle<CR>
map <C-n> :TagbarToggle<CR>
map <F6> :SyntasticCheck<CR>
map <C-A-p> :Welcome<CR>
noremap <C-h> :set hlsearch! hlsearch?<CR>
map <c-d> :bd!<CR>
map <C-f> :Ack<space>
nmap mm '
vmap <F9> :'<,'>sort<CR>
"nmap <C-o> :NERDTreeToggle<CR>:NERDTreeToggle<CR>
nmap <C-o> :NERDTree<CR>
nmap <C-A-p> :OpenSession<space>
nmap <C-S> :w<CR>
nmap <leader>p "+gP
vmap <leader>y "+y


" -- Insert mode mapping
"imap ii <Esc>
imap ;; <Esc>

" -- Search
set incsearch
set hlsearch
set smartcase

" -- Beep
set novisualbell
set noerrorbells

"Supprime le maximum de chose dans l'interface
set guioptions=Ace
let NERDTreeIgnore = ['\.pyc$']

"Linter configuration
let g:syntastic_debug = 0
let g:syntastic_python_checkers = ['flake8']
let g:syntastic_python_flake8_args= '--max-line-length=119'
let g:flake8_max_line_length=119


"Jedi
autocmd FileType python setlocal omnifunc=jedi#completions
let g:jedi#completions_enabled = 1
let g:jedi#auto_vim_configuration = 0
let g:jedi#smart_auto_mappings = 0
let g:neocomplete#force_omni_input_patterns.python =
\ '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
" alternative pattern: '\h\w*\|[^. \t]\.\w*'

"let g:SuperTabDefaultCompletionType = "<C-x><C-o>"

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
"let g:UltiSnipsExpandTrigger="<C-j>"
"let g:UltiSnipsExpandTrigger="<tab>"
"let g:UltiSnipsJumpForwardTrigger="<c-b>"
"let g:UltiSnipsJumpBackwardTrigger="<c-z>"
"" If you want :UltiSnipsEdit to split your window.
"let g:UltiSnipsEditSplit="vertical"

"let g:UltiSnipsExpandTrigger="<tab>"
"let g:UltiSnipsJumpForwardTrigger="<c-b>"
"let g:UltiSnipsJumpBackwardTrigger="<c-z>"
"let g:UltiSnipsExpandTrigger="<C-j>"
"let g:UltiSnipsJumpForwardTrigger="<c-b>"
"let g:UltiSnipsJumpBackwardTrigger="<c-z>"
"let g:UltiSnipsEditSplit="vertical"

"Git
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>gc :Gcommit<CR>
nnoremap <Leader>gbl :Gblame<CR>
nnoremap <Leader>gbr :Gbrowse<CR>
nnoremap <Leader>gdiff :Gdiff<CR>

"Multiple cursors
"let g:multi_cursor_start_key='<C-m>'

"FIXME
"Align comments
"nnoremap <Leader>cb <leader>c<SPACE>

"set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*/build/*

"Emmet
let g:user_emmet_mode='a'
let g:user_emmet_leader_key = '<leader>'
"let g:user_emmet_expandabbr_key = '<leader>e'


" YouCompleteMe configuration
"nnoremap <leader>jd :YcmCompleter GoTo<CR>

" Syntaxes
autocmd BufNewFile,BufRead *.pp   set syntax=puppet
au BufNewFile,BufRead *.sls set filetype=sls

" vim-session
let g:session_autoload='no'
let g:session_autosave='yes'

" NeoComplete
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)


" SuperTab like snippets behavior.
"imap <expr><TAB>
" \ pumvisible() ? "\<C-n>" :
" \ neosnippet#expandable_or_jumpable() ?
" \    "\<TAB>" : "\<Plug>(neosnippet_expand_or_jump)"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif
