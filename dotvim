let $PATH=$PATH . ':' . $HOME . '/.local/bin'
let $PATH=$PATH . ':' . $HOME . '/bin'
let $PATH=$PATH . ':' . $HOME . '/Library/Python/3.5/bin'
let $TERM='terminator'

call plug#begin('~/.config/nvim/plugged')

""Syntax
Plug 'mustache/vim-mustache-handlebars'
Plug 'Puppet-Syntax-Highlighting'
Plug 'Glench/Vim-Jinja2-Syntax'
Plug 'ivoputzer/vim-colors-flatland'
Plug 'mattn/emmet-vim'
Plug 'mitsuhiko/vim-rst'
Plug 'pfdevilliers/Pretty-Vim-Python'
Plug 'saltstack/salt-vim'
Plug 'less-syntax'
Plug 'mako.vim'
"Plug 'pangloss/vim-javascript'
Plug 'elzr/vim-json'
Plug 'aaronj1335/underscore-templates.vim'
Plug 'ekalinin/Dockerfile.vim' 
Plug 'othree/es.next.syntax.vim'
Plug 'othree/yajs.vim'

""Colorschemes
Plug 'badwolf'
Plug 'chriskempson/vim-tomorrow-theme'
Plug 'flazz/vim-colorschemes'
Plug 'jordwalke/flatlandia'
Plug 'mbriggs/vim-themes'
Plug 'sickill/vim-monokai'
Plug 'trusktr/seti.vim'
Plug 'godlygeek/csapprox'
Plug 'w0ng/vim-hybrid'
Plug 'zenorocha/dracula-theme',{'rtp': 'vim/'}


""Autocompletion
Plug 'Shougo/neocomplete'
Plug 'Shougo/neosnippet'
Plug 'Shougo/neosnippet-snippets'
Plug 'davidhalter/jedi-vim'

""Tools
Plug 'scrooloose/syntastic'
Plug 'majutsushi/tagbar'
Plug 'scrooloose/nerdcommenter'
Plug 'kien/ctrlp.vim'

Plug 'scrooloose/nerdtree'
Plug 'https://github.com/scrooloose/nerdtree'
Plug 'tpope/vim-fugitive'
"Plug 'JessicaKMcIntosh/Vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'ervandew/supertab'
Plug 'mhinz/vim-startify'
Plug 'edsono/vim-matchit'
Plug 'mileszs/ack.vim'
"Plug 'minibufexplorerpp'
Plug 'sudo.vim'
Plug 'surround.vim'
Plug 'jlanzarotta/bufexplorer'
Plug 'jceb/vim-orgmode'
Plug 'tpope/vim-speeddating'
"Plug 'vim-flake8'
"Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
"Plug 'junegunn/fzf.vim'

call plug#end()


"" Set up vim-project
""set rtp+=~/.vim/bundle/vim-project/
"" custom starting path
""call project#rc("~/Projects")

"let g:project_use_nerdtree = 1

filetype on
set hidden
"set antialias
set nu
set ai
set si
syntax on
set cursorline
filetype indent on
filetype plugin on
set tabstop=4
set shiftwidth=4
set expandtab
set smarttab
set shiftround
let mapleader=","
set background=dark
let g:hybrid_custom_term_colors = 1
let g:hybrid_reduced_contrast = 1 " Remove this line if using the default palette.
colorscheme hybrid
set ic  "Insensitive case
set colorcolumn=+1
set colorcolumn=80
set guifont=Monaco\ for\ Powerline:h14

"" -- normal mode mapping
nmap <A-h> :bp!<CR>
nmap <A-l> :bn!<CR>
map E :NERDTreeToggle<CR>
map <C-k><C-b> :NERDTreeToggle<CR>
map <C-F12> :TagbarToggle<CR>
map <C-n> :TagbarToggle<CR>
map <F6> :SyntasticCheck<CR>
map <C-A-p> :Welcome<CR>
noremap <C-h> :set hlsearch! hlsearch?<CR>
map <c-d> :bd!<CR>
map <C-f> :Ack<space>
nmap mm '
vmap <F9> :'<,'>sort<CR>
nmap <C-o> :NERDTree<CR>
nmap <C-A-p> :OpenSession<space>
nmap <C-S> :w<CR>
nmap <leader>p "+gP
vmap <leader>y <right>"+y
map <C-p> :FZF<CR>
nmap <C-b> :BufExplorer<CR>
nmap <C-w>b :BufExplorer<CR>


"" -- Insert mode mapping
imap ;; <Esc>

"" -- Search
set incsearch
set hlsearch
set smartcase

"" -- Beep
set novisualbell
set noerrorbells

""Supprime le maximum de chose dans l'interface
set guioptions=Ace

" NERDTree configuration
let NERDTreeIgnore = ['\.pyc$']

""Linter configuration
let g:syntastic_debug = 0
let g:syntastic_python_checkers = ['flake8']
"let g:syntastic_python_flake8_args= '--max-line-length=119'
let g:syntastic_javascript_checkers = ['eslint']
"let g:flake8_max_line_length=119
let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0


"Neocomplete
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'



""Jedi
autocmd FileType python setlocal omnifunc=jedi#completions
let g:jedi#completions_enabled = 1
let g:jedi#auto_vim_configuration = 0
let g:jedi#smart_auto_mappings = 0

""Git
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>gc :Gcommit<CR>
nnoremap <Leader>gbl :Gblame<CR>
nnoremap <Leader>gbr :Gbrowse<CR>
nnoremap <Leader>gdiff :Gdiff<CR>



nnoremap <cr> :noh<CR><CR>:<backspace>

""Emmet
let g:user_emmet_mode='a'
let g:user_emmet_leader_key = '<leader>'
"let g:user_emmet_expandabbr_key = '<leader>e'


"" Syntaxes
autocmd BufNewFile,BufRead *.pp   set syntax=puppet
au BufNewFile,BufRead *.sls set filetype=sls

"" vim-session
"let g:session_autoload='no'
"let g:session_autosave='yes'

"" NeoComplete
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)


"" SuperTab like snippets behavior.
"smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
"\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

"" For conceal markers.
"if has('conceal')
  "set conceallevel=2 concealcursor=niv
"endif

set clipboard=unnamedplus

"Ignore files
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/node_modules/*,*/jspm_packages/*,*/__pycache__/*
set clipboard+=unnamedplus

function! Reloadconfig()
    source $HOME/.vimrc
endfunction

function! StrTrim(txt)
  return substitute(a:txt, '^\n*\s*\(.\{-}\)\n*\s*$', '\1', '')
endfunction

"echo system('npm-which eslint')
"let b:syntastic_javascript_eslint_exec = StrTrim(system('npm-which eslint'))
