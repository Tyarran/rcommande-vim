let $PATH=$PATH . ':' . $HOME . '/.local/bin'
let $PATH=$PATH . ':' . $HOME . '/bin'
let $PATH=$PATH . ':' . $HOME . '/usr/local/bin'

call plug#begin('~/.config/nvim/plugged')

"Syntaxes
Plug 'Glench/Vim-Jinja2-Syntax'
Plug 'IN3D/vim-raml'
Plug 'puppetlabs/puppet-syntax-vim'
Plug 'aaronj1335/underscore-templates.vim'
Plug 'ekalinin/Dockerfile.vim' 
Plug 'elzr/vim-json'
" Plug 'klen/python-mode'
Plug 'mattn/emmet-vim'
Plug 'mitsuhiko/vim-rst'
Plug 'mustache/vim-mustache-handlebars'
Plug 'saltstack/salt-vim'
Plug 'pearofducks/ansible-vim'
" Plug 'mxw/vim-jsx'
" Plug 'pangloss/vim-javascript'
" Plug 'jelera/vim-javascript-syntax'
Plug 'cespare/vim-toml'
" Plug 'hdima/python-syntax'
Plug 'reasonml-editor/vim-reason-plus'
Plug 'StanAngeloff/php.vim'
Plug 'dragfire/Improved-Syntax-Highlighting-Vim'
" Plug 'inkarkat/SyntaxAttr.vim'
Plug 'vim-python/python-syntax'
Plug 'sirtaj/vim-openscad'
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
Plug 'amiralies/vim-rescript'

""Colorschemes
Plug 'chriskempson/tomorrow-theme', { 'rtp': 'vim' } 
Plug 'morhetz/gruvbox'
" Plug 'hzchirs/vim-material'
Plug 'kaicataldo/material.vim'
Plug 'w0ng/vim-hybrid'
Plug 'pgavlin/pulumi.vim'
Plug 'sainnhe/edge'
" Plug 'arcticicestudio/nord-vim'
Plug 'rcommande/nord-wave-vim'

""Autocompletion
Plug 'sirver/UltiSnips'
Plug 'honza/vim-snippets'
Plug 'neoclide/coc.nvim'
Plug 'neoclide/coc.nvim', {'do': 'yarn install --frozen-lockfile'}

""Tools
Plug 'w0rp/ale'
Plug 'tpope/vim-fugitive'
Plug 'tommcdo/vim-fubitive'
" Plug 'vim-airline/vim-airline'
" Plug 'vim-airline/vim-airline-themes'
"Plug 'itchyny/lightline.vim'
" Plug 'bling/vim-bufferline'
Plug 'tmhedberg/matchit'
Plug 'mileszs/ack.vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'terryma/vim-multiple-cursors'
Plug 'fholgado/minibufexpl.vim'
Plug 'romgrk/winteract.vim'
Plug 'ap/vim-buftabline'
Plug 'oblitum/rainbow'
Plug 'embear/vim-localvimrc'
Plug 'osyo-manga/vim-over'
Plug 'uguu-org/vim-matrix-screensaver'
Plug 'tpope/vim-rhubarb'
Plug 'djoshea/vim-autoread'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch'
Plug 'majutsushi/tagbar'

call plug#end()


set cursorline
filetype on
" set hidden
set nu
set rnu
set ai
set si
filetype indent on
filetype plugin on
let mapleader=","
set background=dark
set showcmd
" colorscheme Tomorrow-Night
" colorscheme gruvbox
" colorscheme material
" colorscheme pulumi
" let g:edge_style = 'neon'
let g:edge_disable_italic_comment = 1
" colorscheme edge
colorscheme nord-wave
set ic  "Insensitive case
syn on

" let g:material_theme_style = 'default' | 'palenight' | 'ocean' | 'lighter' | 'darker'
let g:material_terminal_italics = 1
let g:material_theme_style = 'ocean' 

"" -- normal mode mapping
nmap <F12> :TagbarToggle<CR>
nmap <C-y> :set hlsearch! hlsearch?<CR>
map <C-f> :Rg<space>
nmap mm '
vmap <F9> :'<,'>sort<CR>
nmap <F5> :Refresh
" nmap <C-m> :IndentGuidesToggle<CR>
nnoremap <tab> :bprevious<CR>
nnoremap <backspace> :bnext<CR>
nnoremap <C-w>n :split<CR>

"FuzzyFinding
nmap <C-b> :Buffers<CR>
nmap <C-p> :Files<CR>

" nmap <leader>e :call NerdTreeToggleResize()<CR>
nmap <leader>e :20Lexplore<CR>

"" -- Insert mode mapping
imap ;; <Esc>

"" -- Search
set incsearch
set hlsearch
set smartcase

"" -- Beep
set novisualbell
set noerrorbells

""Supprime le maximum de chose dans l'interface
set guioptions=Ace

set wrap
set mouse=a

" NERDTree configuration
let g:netrw_liststyle = 3
" let NERDTreeIgnore = ['\.pyc$', '__pycache__$']
" let NERDTreeShowHidden=1
" let NERDTreeQuitOnOpen=3
" let NERDTreeUseTCD=1

"" JSX
let g:jsx_ext_required = 0 


" ALE
" let g:ale_completion_enabled = 1
let g:ale_completion_enabled = 0
set omnifunc=ale#completion#OmniFunc

"airline
" let g:airline_theme = 'material'
" let g:airline_powerline_fonts = 1
" let g:airline#extensions#tabline#enabled = 1
" let g:airline#extensions#ale#enabled = 1

"Deoplete
" let g:deoplete#enable_at_startup = 1
" let g:deoplete#sources = {'_': ['ale']}

""Git
"nnoremap <Leader>gs :Gstatus<CR>
"nnoremap <Leader>gc :Gcommit<CR>
"nnoremap <Leader>gbl :Gblame<CR>
"nnoremap <Leader>gbr :Gbrowse<CR>
"nnoremap <Leader>gdiff :Gdiff<CR>
"
"

"FZF
nnoremap <Leader>gt :BTags<CR>
nnoremap <Leader>t :CocList tags<CR>
let g:fzf_tags_command = 'ctags -R'

"Emmet
let g:user_emmet_mode='a'
let g:user_emmet_leader_key = '<leader>'

"" Force syntaxes
autocmd BufNewFile,BufRead *.pp  set syntax=puppet
autocmd BufNewFile,BufRead *.sls set filetype=sls
let g:python_highlight_all = 1

"" NeoComplete
" imap <C-k>     <Plug>(neosnippet_expand_or_jump)
" smap <C-k>     <Plug>(neosnippet_expand_or_jump)
" xmap <C-k>     <Plug>(neosnippet_expand_target)


set clipboard+=unnamedplus

function! s:reloadconfig()
    source $HOME/.config/nvim/init.vim
endfunction

command! Reload :source $HOME/.config/nvim/init.vim
command! Refresh :e!


" function! NerdTreeToggleResize()
"     let isOpen = g:NERDTree.IsOpen()
"     " echo g:NERDTree
"     if isOpen
" 	    execute ":NERDTreeClose"
"     else
" 	    execute ":NERDTreeFind"
" 	    execute ':vertical resize ' . g:NERDTreeWinSize
"     " echo isOpen
"     " execute ':NERDTreeToggle'
"     " " execute ':NERDTreeCWD'
"     " let isOpen = g:NERDTree.IsOpen()
"     " if isOpen
" 	" echo "Open"
" 	    " " execute ':NERDTreeFind'
" 	" " execute ':NERDTreeClose'
" 	" " execute ':NERDTreeCWD'
" 	" " execute ':NERDTreeFind'
" 	" " execute ':vertical resize ' . g:NERDTreeWinSize
"     " else
" 	    " echo "not open"
"     endif
" endfunction

" function! CloseBuffer()
"     let isOpen = g:NERDTree.IsOpen()
"     if isOpen
"         call  NerdTreeToggleResize()
"     endif
"     execute ':bd!'
"     if isOpen
"         call  NerdTreeToggleResize()
"     endif
" endfunction

" command! CB call CloseBuffer()
map <C-d> :bd<CR> :bprevious<CR>

inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
" command! NTF execute ':NERDTreeFind'

" MinibufExpl
let g:miniBufExplorerAutoStart = 0

" Winteract
nmap <leader>w :InteractiveWindow<CR>


" Rainbow brackets
let g:rainbow_active = 1

let g:rainbow_load_separately = [
    \ [ '*' , [['(', ')'], ['\[', '\]'], ['{', '}']] ],
    \ [ '*.tex' , [['(', ')'], ['\[', '\]']] ],
    \ [ '*.cpp' , [['(', ')'], ['\[', '\]'], ['{', '}']] ],
    \ [ '*.{html,htm}' , [['(', ')'], ['\[', '\]'], ['{', '}'], ['<\a[^>]*>', '</[^>]*>']] ],
    \ ]

" Visual ident
let g:indent_guides_auto_colors = 1
let g:indent_guides_enable_on_vim_startup = 0
hi IndentGuidesOdd  guibg=red   ctermbg=3
hi IndentGuidesEven guibg=green ctermbg=4

let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']

" Local VIM configurations
"let g:local_vimrc = ['.config', '_vimrc_local.vim']
"call lh#local_vimrc#munge('whitelist', $HOME.'/Projects')
let g:localvimrc_ask=0


nnoremap <leader>d :ALEGoToDefinition<CR>
nnoremap <leader>D :ALEGoToDefinitionInSplit<CR>
nnoremap <leader>f :ALEFindReferences<CR>
nnoremap <leader>h :ALEHover<CR>
nnoremap <leader>ff :ALEFix<CR>

" For Neovim 0.1.3 and 0.1.
let $NVIM_TUI_ENABLE_TRUE_COLOR=1

" Or if you have Neovim >= 0.1.5
if (has("termguicolors"))
 set termguicolors
endif

"split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>


"NeoVIm
"/home/romain/.local/pipx/shared/bin/python3
let g:python3_host_prog = $HOME.'/.local/pipx/venvs/flake8/bin/python'
let g:loaded_ruby_provider = 0
let g:python_host_prog = $HOME.'/.local/share/virtualenvs/vim2/bin/python'

let python_highlight_all = 1
let g:palenight_terminal_italics=1

syntax on

" nnoremap <C-_> :Commentary<CR>
" vnoremap <C-_> :Commentary<CR>

nnoremap <leader>ff :ALEFix<CR>
