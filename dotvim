let $PATH=$PATH . ':' . $HOME . '/.local/bin'
let $PATH=$PATH . ':' . $HOME . '/bin'
let $PATH=$PATH . ':' . $HOME . '/use/local/bin'

call plug#begin('~/.config/nvim/plugged')

"Syntaxes
Plug 'Glench/Vim-Jinja2-Syntax'
Plug 'IN3D/vim-raml'
Plug 'puppetlabs/puppet-syntax-vim'
Plug 'aaronj1335/underscore-templates.vim'
Plug 'ekalinin/Dockerfile.vim' 
Plug 'elzr/vim-json'
Plug 'klen/python-mode'
Plug 'mattn/emmet-vim'
Plug 'mitsuhiko/vim-rst'
Plug 'mustache/vim-mustache-handlebars'
"Plug 'othree/es.next.syntax.vim'
"Plug 'othree/yajs.vim'
Plug 'saltstack/salt-vim'
Plug 'pearofducks/ansible-vim'
Plug 'mxw/vim-jsx'
Plug 'pangloss/vim-javascript'
Plug 'cespare/vim-toml'
Plug 'hdima/python-syntax'

""Colorschemes
Plug 'arcticicestudio/nord-vim'
Plug 'sjl/badwolf'
Plug 'chriskempson/vim-tomorrow-theme'
Plug 'cocopon/iceberg.vim'
Plug 'flazz/vim-colorschemes'
Plug 'ivoputzer/vim-colors-flatland'
Plug 'jordwalke/flatlandia'
Plug 'kamwitsta/nordisk'
Plug 'kristijanhusak/vim-hybrid-material'
Plug 'matthewtodd/vim-twilight'
Plug 'sickill/vim-monokai'
Plug 'trusktr/seti.vim'
Plug 'w0ng/vim-hybrid'
Plug 'zenorocha/dracula-theme',{'rtp': 'vim/'}
Plug 'jdkanani/vim-material-theme'
Plug 'drewtempelmeyer/palenight.vim'
Plug 'NLKNguyen/papercolor-theme'
Plug 'mhartington/oceanic-next'
Plug 'sonph/onehalf', {'rtp': 'vim/'}
"
""Autocompletion
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'Shougo/neosnippet'
Plug 'Shougo/neosnippet-snippets'
"Plug 'zchee/deoplete-jedi'
"Plug 'davidhalter/jedi-vim'
Plug 'autozimu/LanguageClient-neovim'


""Tools
Plug 'miyakogi/conoline.vim'
Plug 'w0rp/ale'
"Plug 'vim-syntastic/syntastic'
Plug 'mtscout6/syntastic-local-eslint.vim'
Plug 'majutsushi/tagbar'
"Plug 'scrooloose/nerdcommenter'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'scrooloose/nerdtree'
Plug 'tpope/vim-fugitive'
Plug 'tommcdo/vim-fubitive'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'tmhedberg/matchit'
Plug 'mileszs/ack.vim'
Plug 'vim-scripts/sudo.vim'
Plug 'tpope/vim-surround'
Plug 'jceb/vim-orgmode'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'Shougo/denite.nvim'
Plug 'ozelentok/denite-gtags'
Plug 'mhinz/vim-signify'
Plug 'terryma/vim-multiple-cursors'
"Plug 'fholgado/minibufexpl.vim'
"Plug 'jmcantrell/vim-virtualenv'
Plug 'plytophogy/vim-virtualenv'
Plug 'tyru/open-browser.vim'
Plug 'tyru/open-browser-github.vim'
Plug 'codeindulgence/vim-tig'
Plug 'NBUT-Developers/extra-instant-markdown' 
Plug 'romgrk/winteract.vim'
Plug 'ap/vim-buftabline'
"Plug 'roxma/vim-hug-neovim-rpc'
"Plug 'roxma/nvim-yarp'
Plug 'oblitum/rainbow'
Plug 'severin-lemaignan/vim-minimap'
Plug 'jiangmiao/auto-pairs'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'embear/vim-localvimrc'
Plug 'osyo-manga/vim-over'
Plug 'sbdchd/neoformat'
Plug 'ambv/black'
Plug 'fisadev/vim-isort'
Plug 'tpope/vim-commentary'

"Plug 'prabirshrestha/async.vim'
"Plug 'prabirshrestha/vim-lsp'
"Plug 'ryanolsonx/vim-lsp-python'
"



if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }

call plug#end()


set nocursorline
filetype on
set hidden
set nu
set ai
set si
filetype indent on
filetype plugin on
let mapleader=","
"let g:hybrid_custom_term_colors = 1
"let g:hybrid_reduced_contrast = 1 " Remove this line if using the default palette.
set background=dark
"colorscheme PaperColor
"colorscheme Tomorrow-Night
"colorscheme 
"colorscheme nord
let g:oceanic_next_terminal_bold = 1
let g:oceanic_next_terminal_italic = 1
"colorscheme OceanicNext
"colorscheme material-theme
colorscheme palenight
set ic  "Insensitive case
"set colorcolumn=+1
"set guifont=Monaco:h14
"set lazyredraw          " Wait to redraw
"set scrolljump=18        " Scroll 8 lines at a time at bottom/top


"" -- normal mode mapping
nmap <F12> :TagbarToggle<CR>
"map <F6> :SyntasticCheck<CR>
nmap <C-;> :set hlsearch! hlsearch?<CR>
map <C-f> :Ack!<space>
nmap mm '
vmap <F9> :'<,'>sort<CR>
nmap <C-o> :NERDTree<CR>
"nmap <tab> :MBEbp<CR>
"nmap <backspace> :MBEbn<CR>
nmap <F5> :Refresh
nmap <C-i> :IndentGuidesToggle<CR>
"nmap <tab> :MBEbp<CR>
nnoremap <tab> :bprev<CR>
nnoremap <backspace> :bnext<CR>

nmap ' :bprev<CR>

"FuzzyFinding
nmap <C-b> :Buffers<CR>

nmap <C-space> :CtrlSpace<CR>
nmap E :call NerdTreeToggleResize()<CR>

"" -- Insert mode mapping
imap ;; <Esc>

"" -- Search
set incsearch
set hlsearch
set smartcase

"" -- Beep
set novisualbell
set noerrorbells

""Supprime le maximum de chose dans l'interface
set guioptions=Ace

set wrap
set mouse=a

" NERDTree configuration
let NERDTreeIgnore = ['\.pyc$', '__pycache__$']

"" JSX
let g:jsx_ext_required = 0 


let g:ale_completion_enabled = 1

"airline
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 0
let g:airline#extensions#ale#enabled = 1

"Deoplete
let g:deoplete#enable_at_startup = 1
let g:jedi#completions_enabled = 0
let g:loaded_python_provider = 1
call deoplete#custom#option('complete_method', 'omnifunc')

""Git
"nnoremap <Leader>gs :Gstatus<CR>
"nnoremap <Leader>gc :Gcommit<CR>
"nnoremap <Leader>gbl :Gblame<CR>
"nnoremap <Leader>gbr :Gbrowse<CR>
"nnoremap <Leader>gdiff :Gdiff<CR>

""Emmet
let g:user_emmet_mode='a'
let g:user_emmet_leader_key = '<leader>'

"" Force syntaxes
autocmd BufNewFile,BufRead *.pp   set syntax=puppet
autocmd BufNewFile,BufRead *.sls set filetype=sls

"" NeoComplete
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)


set clipboard+=unnamedplus

"Ignore files with CtrlP
"set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/node_modules/*,*/jspm_packages/*,*/__pycache__/*,*/dist/*,*/lambda_dist/*

function! s:reloadconfig()
    source $HOME/.config/nvim/init.vim
endfunction

command! Reload :source $HOME/.config/nvim/init.vim
command! Refresh :e!


"Comments
"let g:NERDCustomDelimiters = {
"    \ 'javascript': { 'left': '// ', 'right': '' }
"\ }

"autocmd VimEnter * call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#151515')

"let g:denite_ignore_source_files = ['*/tmp/*', '*.so', '*.swp', '*.zip', '*/node_modules/*', '*/jspm_packages/*', '*/__pycache__/*', 'packages_sav/*']
call denite#custom#var('grep', 'command', ['ack'])


" ACK/AG
let g:ackprg = 'ag --nogroup --nocolor --column'


function! NerdTreeToggleResize()
    execute ':NERDTreeToggle'
    let isOpen = g:NERDTree.IsOpen()
    if isOpen
	execute ':NERDTreeClose'
	execute ':NERDTree'
	execute ':NERDTreeFind'
	execute ':vertical resize ' . g:NERDTreeWinSize
    endif
endfunction

function! CloseBuffer()
    let isOpen = g:NERDTree.IsOpen()
    if isOpen
        call  NerdTreeToggleResize()
    endif
    execute ':MBEbd!'
    if isOpen
        call  NerdTreeToggleResize()
    endif
endfunction

command! CB call CloseBuffer()
map <C-d> :MBEbd<CR>

nnoremap <leader>gd :<C-u>Denite
call denite#custom#source(
\ 'file_rec', 'matchers', ['matcher_fuzzy', 'matcher_ignore_globs'])
call denite#custom#filter('matcher_ignore_globs', 'ignore_globs',
    \ [
    \ '.git/', '.ropeproject/', '__pycache__/',
    \ 'venv/',
    \ 'images/',
    \ '*.min.*',
    \ '*.so',
    \ '*.swp',
    \ '*.pyc',
    \ '*packages*',
    \ '*repository*',
    \ '*cache*',
    \ 'img/', 'fonts/', '.tox/', '*/tmp/*', '*node_modules*', '*jspm_packages*'],)

"*/tmp/*,*.so,*.swp,*.zip,*/node_modules/*,*/jspm_packages/*,*/__pycache__/*
" deoplete tab-complete
inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
command! NTF execute ':NERDTreeFind'

" MinibufExpl
let g:miniBufExplorerAutoStart = 0

" Winteract
nmap <leader>w :InteractiveWindow<CR>


" Rainbow brackets
let g:rainbow_active = 1

let g:rainbow_load_separately = [
    \ [ '*' , [['(', ')'], ['\[', '\]'], ['{', '}']] ],
    \ [ '*.tex' , [['(', ')'], ['\[', '\]']] ],
    \ [ '*.cpp' , [['(', ')'], ['\[', '\]'], ['{', '}']] ],
    \ [ '*.{html,htm}' , [['(', ')'], ['\[', '\]'], ['{', '}'], ['<\a[^>]*>', '</[^>]*>']] ],
    \ ]

"let g:rainbow_guifgs = ['RoyalBlue3', 'DarkOrange3', 'DarkOrchid3', 'FireBrick']
"let g:rainbow_ctermfgs = ['lightblue', 'lightgreen', 'yellow', 'red', 'magenta']

" Visual ident
let g:indent_guides_auto_colors = 1
hi IndentGuidesOdd  guibg=red   ctermbg=3
hi IndentGuidesEven guibg=green ctermbg=4

"if (has("nvim"))
"  "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
"  "let $NVIM_TUI_ENABLE_TRUE_COLOR=1
"endif

"For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
"Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
" < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
"if (has("termguicolors"))
  "set termguicolors
"endif
""
"set termguicolors
" Italics for my favorite color scheme
"let g:palenight_terminal_italics=1

let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']

" Local VIM configurations
"let g:local_vimrc = ['.config', '_vimrc_local.vim']
"call lh#local_vimrc#munge('whitelist', $HOME.'/Projects')
let g:localvimrc_ask=0



let g:LanguageClient_serverCommands = {
    \ 'rust': ['~/.cargo/bin/rustup', 'run', 'stable', 'rls'],
    \ 'javascript': ['/usr/local/bin/javascript-typescript-stdio'],
    \ 'javascript.jsx': ['tcp://127.0.0.1:2089'],
    \ 'python': ['pyls'],
    \ }


"nnoremap <F5> :call LanguageClient_contextMenu()<CR>
"" Or map each action separately
""nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
"nnoremap <silent> K :call LanguageClient_textDocument_hover()<CR>
nnoremap <leader>R :call LanguageClient#textDocument_rename()<CR>
nnoremap <leader>d :call LanguageClient#textDocument_definition()<CR>
"nnoremap <silent> gd :call LanguageClient_textDocument_definition()<CR>
""nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>
"nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>

"set completefunc=LanguageClient#complete
"let g:deoplete#complete_method="omnifunc"
"autocmd FileType python setlocal omnifunc=LanguageClient#complete
let g:LanguageClient_diagnosticsEnable=0

let g:conoline_auto_enable = 1
" For Neovim 0.1.3 and 0.1.
let $NVIM_TUI_ENABLE_TRUE_COLOR=1

" Or if you have Neovim >= 0.1.5
if (has("termguicolors"))
 set termguicolors
endif

"split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>


"NeoVIm
let g:python3_host_prog = $HOME.'/.local/share/virtualenvs/vim/bin/python'

let python_highlight_all = 1
let g:palenight_terminal_italics=1

syntax on

nnoremap <C-_> :Commentary<CR>
vnoremap <C-_> :Commentary<CR>

"Black
let g:black_virtualenv = $HOME.'/.local/share/virtualenvs/vim/'
