let $PATH=$PATH . ':' . $HOME . '/.local/bin'
let $PATH=$PATH . ':' . $HOME . '/bin'
let $TERM='terminator'

call plug#begin('~/.config/nvim/plugged')

"Syntaxes
Plug 'Glench/Vim-Jinja2-Syntax'
Plug 'IN3D/vim-raml'
Plug 'puppetlabs/puppet-syntax-vim'
Plug 'aaronj1335/underscore-templates.vim'
Plug 'ekalinin/Dockerfile.vim' 
Plug 'elzr/vim-json'
Plug 'klen/python-mode'
Plug 'mattn/emmet-vim'
Plug 'mitsuhiko/vim-rst'
Plug 'mustache/vim-mustache-handlebars'
Plug 'othree/es.next.syntax.vim'
Plug 'othree/yajs.vim'
Plug 'saltstack/salt-vim'
Plug 'pearofducks/ansible-vim'

""Colorschemes
Plug 'arcticicestudio/nord-vim'
Plug 'sjl/badwolf'
Plug 'chriskempson/vim-tomorrow-theme'
Plug 'cocopon/iceberg.vim'
Plug 'flazz/vim-colorschemes'
Plug 'ivoputzer/vim-colors-flatland'
Plug 'jordwalke/flatlandia'
Plug 'kamwitsta/nordisk'
Plug 'kristijanhusak/vim-hybrid-material'
Plug 'matthewtodd/vim-twilight'
Plug 'sickill/vim-monokai'
Plug 'trusktr/seti.vim'
Plug 'w0ng/vim-hybrid'
Plug 'zenorocha/dracula-theme',{'rtp': 'vim/'}
Plug 'jdkanani/vim-material-theme'

""Autocompletion
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'Shougo/neosnippet'
Plug 'Shougo/neosnippet-snippets'
Plug 'zchee/deoplete-jedi'
Plug 'davidhalter/jedi-vim'


""Tools
Plug 'scrooloose/syntastic'
Plug 'majutsushi/tagbar'
Plug 'scrooloose/nerdcommenter'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'scrooloose/nerdtree'
Plug 'tpope/vim-fugitive'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'tmhedberg/matchit'
Plug 'mileszs/ack.vim'
Plug 'vim-scripts/sudo.vim'
Plug 'tpope/vim-surround'
Plug 'jceb/vim-orgmode'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'Shougo/denite.nvim'
Plug 'ozelentok/denite-gtags'
Plug 'mhinz/vim-signify'
Plug 'terryma/vim-multiple-cursors'
Plug 'fholgado/minibufexpl.vim'
Plug 'jmcantrell/vim-virtualenv'
Plug 'tyru/open-browser.vim'
Plug 'tyru/open-browser-github.vim'
Plug 'codeindulgence/vim-tig'
Plug 'NBUT-Developers/extra-instant-markdown' 
Plug 'romgrk/winteract.vim'
Plug 'ap/vim-buftabline'
Plug 'Shougo/deoplete.nvim'
Plug 'roxma/vim-hug-neovim-rpc'
Plug 'roxma/nvim-yarp'
Plug 'oblitum/rainbow'
Plug 'severin-lemaignan/vim-minimap'
Plug 'jiangmiao/auto-pairs'

call plug#end()


set t_Co=256
filetype on
set hidden
set nu
set ai
set si
syntax on
set cursorline
filetype indent on
filetype plugin on
let mapleader=","
let g:hybrid_custom_term_colors = 1
let g:hybrid_reduced_contrast = 1 " Remove this line if using the default palette.
set background=dark
colorscheme Tomorrow-Night
"colorscheme nord
set ic  "Insensitive case
"set colorcolumn=+1
set guifont=Monaco:h14
"set lazyredraw          " Wait to redraw
"set scrolljump=18        " Scroll 8 lines at a time at bottom/top


"" -- normal mode mapping
nmap <F12> :TagbarToggle<CR>
map <F6> :SyntasticCheck<CR>
nmap <C-;> :set hlsearch! hlsearch?<CR>
map <C-f> :Ack!<space>
nmap mm '
vmap <F9> :'<,'>sort<CR>
nmap <C-o> :NERDTree<CR>
nmap <tab> :MBEbp<CR>
nmap <backspace> :MBEbn<CR>
nmap <F5> :Refresh

nmap ' :MBEbn<CR>

"FuzzyFinding
nmap <C-b> :Buffers<CR>

nmap <C-space> :CtrlSpace<CR>
nmap E :call NerdTreeToggleResize()<CR>

"" -- Insert mode mapping
imap ;; <Esc>

"" -- Search
set incsearch
set hlsearch
set smartcase

"" -- Beep
set novisualbell
set noerrorbells

""Supprime le maximum de chose dans l'interface
set guioptions=Ace

" NERDTree configuration
let NERDTreeIgnore = ['\.pyc$', '__pycache__$']

""Linter configuration
let g:syntastic_debug = 0
let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_python_checkers = ['flake8',]

"airline
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 0

"Deoplete
let g:deoplete#enable_at_startup = 1
let g:jedi#completions_enabled = 0
let g:loaded_python_provider = 1


""Git
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>gc :Gcommit<CR>
nnoremap <Leader>gbl :Gblame<CR>
nnoremap <Leader>gbr :Gbrowse<CR>
nnoremap <Leader>gdiff :Gdiff<CR>

""Emmet
let g:user_emmet_mode='a'
let g:user_emmet_leader_key = '<leader>'

"" Force syntaxes
autocmd BufNewFile,BufRead *.pp   set syntax=puppet
autocmd BufNewFile,BufRead *.sls set filetype=sls

"" NeoComplete
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

""pymode
let g:pymode_rope = 0
let g:pymode_folding = 0
let g:pymode_lint = 0

""vim-jedi
let g:jedi#completions_enabled = 0


set clipboard+=unnamedplus

"Ignore files with CtrlP
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/node_modules/*,*/jspm_packages/*,*/__pycache__/*,*/dist/*,*/lambda_dist/*

function! s:reloadconfig()
    source $HOME/.config/nvim/init.vim
endfunction

command! Reload :source $HOME/.config/nvim/init.vim
command! Refresh :e!


"Comments
"let g:NERDCustomDelimiters = {
"    \ 'javascript': { 'left': '// ', 'right': '' }
"\ }

" NERDTress File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
	exec 'autocmd FileType nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
	exec 'autocmd FileType nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', '#151515')
call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')
call NERDTreeHighlightFile('ds_store', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('gitconfig', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('gitignore', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('bashrc', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('bashprofile', 'Gray', 'none', '#686868', '#151515')

autocmd VimEnter * call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#151515')

"let g:denite_ignore_source_files = ['*/tmp/*', '*.so', '*.swp', '*.zip', '*/node_modules/*', '*/jspm_packages/*', '*/__pycache__/*', 'packages_sav/*']
call denite#custom#var('grep', 'command', ['ack'])


" ACK/AG
let g:ackprg = 'ag --nogroup --nocolor --column'
"let g:ackprg = 'ag --vimgrep'


function! NerdTreeToggleResize()
    execute ':NERDTreeToggle'
    let isOpen = g:NERDTree.IsOpen()
    if isOpen
	execute ':NERDTreeClose'
	execute ':NERDTree'
	execute ':NERDTreeFind'
	execute ':vertical resize ' . g:NERDTreeWinSize
    endif
endfunction

function! CloseBuffer()
    let isOpen = g:NERDTree.IsOpen()
    if isOpen
        call  NerdTreeToggleResize()
    endif
    execute ':MBEbd!'
    if isOpen
        call  NerdTreeToggleResize()
    endif
endfunction

command! CB call CloseBuffer()
map <C-d> :MBEbd<CR>

nnoremap <leader>gd :<C-u>Denite
call denite#custom#source(
\ 'file_rec', 'matchers', ['matcher_fuzzy', 'matcher_ignore_globs'])
call denite#custom#filter('matcher_ignore_globs', 'ignore_globs',
    \ [
    \ '.git/', '.ropeproject/', '__pycache__/',
    \ 'venv/',
    \ 'images/',
    \ '*.min.*',
    \ '*.so',
    \ '*.swp',
    \ '*.pyc',
    \ '*packages*',
    \ '*repository*',
    \ '*cache*',
    \ 'img/', 'fonts/', '.tox/', '*/tmp/*', '*node_modules*', '*jspm_packages*'],)

"*/tmp/*,*.so,*.swp,*.zip,*/node_modules/*,*/jspm_packages/*,*/__pycache__/*
" deoplete tab-complete
inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
command! NTF execute ':NERDTreeFind'

" MinibufExpl
let g:miniBufExplorerAutoStart = 0

" Winteract
nmap <leader>w :InteractiveWindow<CR>


" Rainbow brackets
let g:rainbow_active = 1

let g:rainbow_load_separately = [
    \ [ '*' , [['(', ')'], ['\[', '\]'], ['{', '}']] ],
    \ [ '*.tex' , [['(', ')'], ['\[', '\]']] ],
    \ [ '*.cpp' , [['(', ')'], ['\[', '\]'], ['{', '}']] ],
    \ [ '*.{html,htm}' , [['(', ')'], ['\[', '\]'], ['{', '}'], ['<\a[^>]*>', '</[^>]*>']] ],
    \ ]

"let g:rainbow_guifgs = ['RoyalBlue3', 'DarkOrange3', 'DarkOrchid3', 'FireBrick']
"let g:rainbow_ctermfgs = ['lightblue', 'lightgreen', 'yellow', 'red', 'magenta']

