let $PATH=$PATH . ':' . $HOME . '/.local/bin'
let $PATH=$PATH . ':' . $HOME . '/bin'
let $PATH=$PATH . ':' . $HOME . '/usr/local/bin'

call plug#begin('~/.config/nvim/plugged')

"Syntaxes
" Plug 'Glench/Vim-Jinja2-Syntax'
" Plug 'reasonml-editor/vim-reason-plus'
" Plug 'rescript-lang/vim-rescript'
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
Plug 'jordwalke/vim-reasonml'
" Plug 'prettier/vim-prettier', {
"   \ 'do': 'yarn install',
"   \ 'branch': 'release/0.x'
"   \ }
" Plug 'sheerun/vim-polyglot'
" Plug 'vim-python/python-syntax'
" Plug 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop' }
" Plug 'reasonml-editor/vim-reason-plus'
" Plug 'autozimu/LanguageClient-neovim', {
"     \ 'branch': 'next',
"     \ 'do': 'bash install.sh',
"     \ }

""Colorschemes
Plug 'kaicataldo/material.vim', { 'branch': 'main' }
" Plug 'joshdick/onedark.vim'
" Plug 'ghifarit53/tokyonight-vim'
Plug 'chriskempson/tomorrow-theme', { 'rtp': 'vim'}
" Plug 'Brettm12345/moonlight.vim'
" Plug 'gugsrs/vim-moonlight2'
Plug 'drewtempelmeyer/palenight.vim'
" Plug 'dracula/vim'
Plug 'sonph/onehalf', { 'rtp': 'vim' }
Plug 'chriskempson/base16-vim'
" Plug 'rakr/vim-one'
Plug 'folke/tokyonight.nvim'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
" Plug 'nvim-treesitter/playground'
" Plug 'nvim-treesitter/nvim-treesitter'
" Plug 'numirias/semshi', {'do': ':UpdateRemotePlugins'}

""Autocompletion
" Plug 'sirver/UltiSnips'
"Plug 'honza/vim-snippets'
Plug 'neoclide/coc.nvim'
Plug 'neoclide/coc.nvim', {'do': 'yarn install --frozen-lockfile'}
" Plug 'codota/tabnine-vim'

""Tools
" Plug 'w0rp/ale'
Plug 'tpope/vim-fugitive'
Plug 'tommcdo/vim-fubitive'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'tmhedberg/matchit'
" Plug 'mileszs/ack.vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'ojroques/nvim-lspfuzzy'
Plug 'gfanto/fzf-lsp.nvim'
Plug 'mg979/vim-visual-multi', {'branch': 'master'}
Plug 'fholgado/minibufexpl.vim'
Plug 'romgrk/winteract.vim'
Plug 'frazrepo/vim-rainbow'
" Plug 'embear/vim-localvimrc'
Plug 'osyo-manga/vim-over'
" Plug 'uguu-org/vim-matrix-screensaver'
Plug 'tpope/vim-rhubarb'
" Plug 'djoshea/vim-autoread'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch'
Plug 'axelf4/vim-strip-trailing-whitespace'
Plug 'preservim/nerdtree'
" Plug 'Shougo/denite.nvim'
" Plug 'liuchengxu/vim-clap', { 'do': ':Clap install-binary!' }
Plug 'liuchengxu/vim-clap', { 'do': { -> clap#installer#force_download() } }
Plug 'liuchengxu/vista.vim'

Plug 'vbe0201/vimdiscord'
" Plug 'ocaml/merlin', {'rtp': 'vim/merlin'}

call plug#end()


set cursorline
filetype on
set hidden
set nu
set ai
set si
set ic  "Insensitive case
syn on
filetype indent on
filetype plugin on
let mapleader=","
set background=dark
set showcmd
set t_Co=256
" colorscheme onedark
" colorscheme Tomorrow-Night
" colorscheme moonlight2
" colorscheme palenight
" colorscheme dracula
" colorscheme onehalfdark
" colorscheme base16-tomorrow-night
" colorscheme base16-material-palenight
" colorscheme base16-material-darker
" colorscheme base16-tomorrow-night-eighties
" colorscheme base16-oceanicnext
" let g:tokyonight_style = "night"
colorscheme tokyonight
set termguicolors

" let g:lightline.colorscheme = 'moonlight'
" let g:moonlight_terminal_italics = 1

"" -- normal mode mapping
nmap <leader>tb :Vista<CR>
nmap <C-y> :set hlsearch! hlsearch?<CR>
nnoremap <tab> :bprevious<CR>
nnoremap <backspace> :bnext<CR>

"FuzzyFinding
nmap <leader>b :Clap buffers<CR>
nmap <C-p> :Files<CR>

nmap <leader>e :NERDTreeFind<CR>

"" -- Search
set incsearch
set hlsearch
set smartcase

set wrap
set mouse=a

" NERDTree configuration
" let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
let g:netrw_winsize = 20
let NERDTreeShowHidden=0
let NERDTreeIgnore=['.bs.js$', '__pycache__$']


"FZF
" nnoremap <Leader>gt :BTags<CR>
" nnoremap <Leader>t :CocList tags<CR>
" let g:fzf_tags_command = 'ctags -R'
 nnoremap <Leader>gf :GitFiles<CR>

" Coc
nnoremap <leader>d :CocList diagnostics<CR>

" Clap
nnoremap <Leader>t :Clap proj_tags<CR>
nnoremap <Leader>gt :Clap tags<CR>
nnoremap <Leader>gf :Clap gfiles<CR>
nnoremap <Leader>f :Clap files<CR>
let g:clap_layout = { 'relative': 'editor' }

set clipboard+=unnamedplus

" Winteract
nmap <leader>w :InteractiveWindow<CR>

" Rainbow brackets
let g:rainbow_active = 1


let g:localvimrc_ask=0


" For Neovim 0.1.3 and 0.1.
let $NVIM_TUI_ENABLE_TRUE_COLOR=1

"NeoVIm
"/home/romain/.local/pipx/shared/bin/python3
let g:python3_host_prog = $HOME.'/.local/share/virtualenvs/nvim3/bin/python'
let g:loaded_ruby_provider = 0
let g:python_host_prog = $HOME.'/.local/share/virtualenvs/vim2/bin/python'

syntax on

" Coc
" TextEdit might fail if hidden is not set.

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> grr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
" Note coc#float#scroll works on neovim >= 0.4.3 or vim >= 8.2.0750
nnoremap <nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
nnoremap <nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
inoremap <nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
inoremap <nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

" no background
" hi Normal guibg=NONE ctermbg=NONE

let g:python_highlight_all = 1

au BufReadPost *.inc set syntax=php

let g:miniBufExplorerAutoStart = 1
let g:miniBufExplBuffersNeeded = 0

" lua <<EOF
" require'nvim-treesitter.configs'.setup {
"   ensure_installed = "maintained", -- one of "all", "maintained" (parsers with maintainers), or a list of languages
"   ignore_install = { "javascript" }, -- List of parsers to ignore installing
"   highlight = {
"    enable = true,              -- false will disable the whole extension
"    disable = { "c", "rust" },  -- list of language that will be disabled
"   },
" }
" EOF

noremap <C-8> <C-\><C-n>

lua require('lspfuzzy').setup {}
